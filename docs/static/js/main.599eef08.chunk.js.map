{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridltem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridltem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAMRC,mBAAS,IAND,mBAMrCC,EANqC,KAMzBC,EANyB,KA2B5C,OACI,sBAAMC,SAdW,SAACC,GAElBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMlB,SAEI,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SApBpB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCZlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCAPO,EAAc,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEjC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECAX,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAyBtC,OAhBAC,qBAAW,WAEPxB,EAAQC,GACHwB,MAAK,SAAAC,GAGEH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAK1B,CAACpB,IAGGqB,EDrBwBK,CAAa1B,GAAhCa,EAJuB,EAI5BN,KAAaa,EAJe,EAIfA,QAGpB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEVxBgB,EAAe,WAAO,IAAD,EAEMzC,mBAAS,CAAC,cAFhB,mBAEvB0C,EAFuB,KAEX3C,EAFW,KAW9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCzBjC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.599eef08.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    \r\n    //La caja de texto tiene que tener un tipo de estado para saber\r\n    //lo que la persona esta escribiendo\r\n    //el onChange se dispara cadavez que la caja cambie \r\n    const [inputValue, setInputValue] = useState(''); //si sedeja vacio es undefined por lo tanto value={inputValue} es undefined\r\n    //Para que se a un strin vacion se deja '' \r\n    //Con esta funcion extraemos el valor de la caja \r\n    //Tenemos el inputValue actualizado con el ultimo valor que la persona escribio\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        //Para prevenir el comportamiento por defecto del formulario \r\n        e.preventDefault();  \r\n\r\n        //console.log('Submit hecho');\r\n        if (inputValue.trim().length > 2) {\r\n            \r\n            setCategories(cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            <input type='text' value={inputValue} onChange={handleInputChange}></input>\r\n        \r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\nexport const getGifs = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=l4XC1JOeeutrvuXdmtRN4LMOTCB1RIhv`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;  \r\n}\r\n","import React from 'react';\r\n\r\nexport const GifGridltem = ({ title, url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>        \r\n        </div>\r\n    )\r\n}\r\n ","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridltem } from './GifGridltem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    \r\n    //Vamos hacer uso del Custom Hook \r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n            {/* Utilizamos un operador ternario ? para logica */}\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n\r\n            <div className=\"card-grid\">   \r\n                 {\r\n                    images.map( img => (\r\n                        <GifGridltem \r\n                            key={img.id}\r\n                            {...img}  \r\n                        />     \r\n                    ))\r\n                 }\r\n             \r\n            </div>\r\n        </>   \r\n    )\r\n} \r\n","//Todos los hooks empiezan por use los cuales tienen un estado \r\nimport { useEffect, useState } from 'react';\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    //Esto es una promesa \r\n    //Los efectos no pueden ser async por que esperan algo sincrono \r\n    useEffect (() => {\r\n\r\n        getGifs(category)\r\n            .then(imgs => {\r\n     \r\n                    //console.log(img);\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n                \r\n            })\r\n\r\n    }, [category])\r\n\r\n\r\n    return state;\r\n}","//Usar el sniper rafc \r\nimport React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\n//Para agresar una lista lo hacemos mediante una expresion que regrese un valor\r\n//map resive dos argumentos el elemento del arreglo y el indice i,  \r\n\r\n\r\n//Para renderizar usamos el Hook del useState \r\nexport const GifExpertApp = () => {\r\n    \r\n    const [categories, setCategories] = useState(['One Punch'] );\r\n    \r\n    /* const handleAdd = () => {\r\n        setCategories([...categories, 'Pokemon']);\r\n        //Otra forma \r\n        //setCategories(cats => [...cats, 'Pokemon']);\r\n    } */\r\n\r\n    //AddCategory podemos enviarle propiedades para la conunicacion entre componentes\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr  /> \r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />, \n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}